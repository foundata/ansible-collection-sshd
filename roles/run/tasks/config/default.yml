# Configuration: Manage settings, like adapting or creating config files.

---


- name: "Config | Default | Extract configured host keys"
  ansible.builtin.set_fact:
    __run_sshd_configured_hostkeys: >-
      {{
        (__run_sshd_merged_sshd_settings.HostKey is string)
        | ternary([__run_sshd_merged_sshd_settings.HostKey], __run_sshd_merged_sshd_settings.HostKey)
        | default([])
      }}


- name: "Config | Default | Check if all configured host keys exist"
  ansible.builtin.stat:
    path: "{{ item }}"
  loop: "{{ __run_sshd_configured_hostkeys }}"
  register: __run_sshd_hostkey_stats


- name: "Config | Default | Generate missing sshd host keys"
  # ssh-keygen -A automatically checks for existing RSA, ECDSA, and ED25519 host
  # keys and generates only the missing ones (regardless of configuration). The
  # command produces output only when it creates new key files, making it easy
  # to detect actual changes.
  # /usr/libexec/openssh/sshd-keygen would be a more flexible alternative as it
  # accepts specific key types as arguments, but it is usually only available on
  # Red Hat-based distributions.
  ansible.builtin.command: "{{ __run_sshd_sshkeygen_executable }} -A"
  when: __run_sshd_hostkey_stats.results | map(attribute='stat.exists') | select('equalto', false) | list | length > 0
  changed_when:
    - __run_sshd_sshkeygen_result['rc'] == 0
    - __run_sshd_sshkeygen_result['stdout'] | trim | length > 0
  register: __run_sshd_sshkeygen_result
  notify: "run_sshd: restart sshd.service"


- name: "Config | Default | Create additional config file"
  ansible.builtin.template:
    src: "00-sshd-managed.conf.j2"
    dest: "{{ __run_sshd_config_file_ansible }}"
    owner: "{{ __run_sshd_config_owner }}"
    group: "{{ __run_sshd_config_group }}"
    mode: "{{ __run_sshd_config_mode }}"
  notify: "run_sshd: restart sshd.service"


- name: "Config | Default | Search for additional sshd config files"
  ansible.builtin.find:
    paths: "{{ __run_sshd_config_include_dir }}"
    patterns: '^.+\.conf$'
    use_regex: true
    hidden: true
    recurse: false
    follow: true
  register: __run_sshd_find_sshd_configd_result


- name: "Config | Default | Show search results of additional sshd config files"
  ansible.builtin.debug:
    msg: "{{ __run_sshd_find_sshd_configd_result['files'] }}"
    verbosity: 3
  when:
    - __run_sshd_find_sshd_configd_result is defined
    - __run_sshd_find_sshd_configd_result['files'] is defined
    - __run_sshd_find_sshd_configd_result['files'] | length > 0


- name: "Config | Default | Get contents of additional sshd config files"
  ansible.builtin.slurp:
    src: "{{ item }}"
  register: __run_sshd_slurp_sshd_configd_result
  loop: "{{ __run_sshd_find_sshd_configd_result['files'] | map(attribute='path') }}"
  when:
    - __run_sshd_find_sshd_configd_result is defined
    - __run_sshd_find_sshd_configd_result['files'] is defined
    - __run_sshd_find_sshd_configd_result['files'] | length > 0


- name: "Config | Default | Show contents of additional sshd config files"
  ansible.builtin.debug:
    msg: "{{ __run_sshd_slurp_sshd_configd_result['results'] }}"
    verbosity: 3
  when:
    - __run_sshd_slurp_sshd_configd_result is defined
    - __run_sshd_slurp_sshd_configd_result['results'] is defined
    - __run_sshd_slurp_sshd_configd_result['results'] | length > 0


- name: "Config | Default | Create a list of options configured in additional sshd config files"
  ansible.builtin.set_fact:
    __run_sshd_additional_options: |-
      {%- set options = [] -%}
      {%- for file_content in (__run_sshd_slurp_sshd_configd_result['results'] | map(attribute='content') | map('b64decode') | list) -%}
        {%- for line in file_content.splitlines() -%}
          {%- if line | regex_search('^[^#].+$', multiline=false, ignorecase=true) -%}
            {%- set ssh_option_name = line | ansible.builtin.regex_replace('\s+', ' ') -%}
            {%- if ssh_option_name | regex_search('^Subsystem[\t ]+', multiline=false, ignorecase=true) -%}
              {%- set ssh_option_name = (ssh_option_name | ansible.builtin.split(' '))[0:2] | join('[\\t ]+') -%}
            {%- else -%}
              {%- set ssh_option_name = (ssh_option_name | ansible.builtin.split(' '))[0] -%}
            {%- endif -%}
            {%- if ssh_option_name not in options -%}
              {%- set _ = options.append(ssh_option_name) -%}
            {%- endif -%}
          {%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{ options }}
  when:
    - __run_sshd_slurp_sshd_configd_result is defined
    - __run_sshd_slurp_sshd_configd_result['results'] is defined
    - __run_sshd_slurp_sshd_configd_result['results'] | length > 0


- name: "Config | Default | Show the list of options configured in additional sshd config files"
  ansible.builtin.debug:
    var: __run_sshd_additional_options
    verbosity: 1
  when:
    - __run_sshd_additional_options is defined
    - __run_sshd_additional_options | length > 0


- name: "Config | Default | Ensure Include directive exists in sshd_config"
  ansible.builtin.lineinfile:
    path: "{{ __run_sshd_config_file }}"
    line: "Include {{ __run_sshd_config_include_dir }}/*.conf"
    state: "present"
    validate: "{{ __run_sshd_sshd_executable }} -t -f %s"
  notify: "run_sshd: restart sshd.service"


# Remember: It is not possible to overwrite values in the sshd configuration,
# first occurrence wins.
- name: "Config | Default | Ensure additional config options take precedence by commenting out duplicates in main config"
  ansible.builtin.replace:
    path: "{{ __run_sshd_config_file }}"
    # Notes on the regex:
    # - {{ __run_sshd_additional_options | join("|") }} will result in something like
    #   HostKey|LogLevel|LoginGraceTime| [...] |Subsystem[\\t ]+sftp|KexAlgorithms
    # - Include has to be excluded from commenting as it can exists multiple times.
    regexp: '^(?![\t ]*Include)([\t ]+)?({{ __run_sshd_additional_options | join("|") }})(.*)'
    replace: '#\1\2\3'
    validate: "{{ __run_sshd_sshd_executable }} -t -f %s"
  notify: "run_sshd: restart sshd.service"
