# Tasks for the Molecule verify stage: Check collection role "run" outcomes.

- name: "Molecule | Verify | Initialize the foundata.sshd.run role (without actually running it; get and expose variables)"
  ansible.builtin.include_role:
    name: "foundata.sshd.run"
    tasks_from: "init"
    public: true


- name: "Molecule | Verify | Gather service facts"
  ansible.builtin.service_facts:


- name: "Molecule | Verify | Show service facts"
  ansible.builtin.debug:
    var: ansible_facts['services']
    verbosity: 3


- name: "Molecule | Verify | Assert SSH service is running"
  ansible.builtin.assert:
    that:
      - ansible_facts['services'][__run_sshd_servicename] is defined
      - ansible_facts['services'][__run_sshd_servicename].state == 'running'
    fail_msg: "SSH service '{{ __run_sshd_servicename }}' is not running"
    success_msg: "SSH service '{{ __run_sshd_servicename }}' is running"


- name: "Molecule | Verify | Extract configured SSH port"
  ansible.builtin.set_fact:
    __testing_configured_ssh_port: >-
      {{
        __run_sshd_merged_sshd_settings.Port | default(22) | int
        if (__run_sshd_merged_sshd_settings is defined and
            __run_sshd_merged_sshd_settings.Port is defined)
        else 22
      }}


- name: "Molecule | Verify | Display configured SSH port"
  ansible.builtin.debug:
    var: __testing_configured_ssh_port
    verbosity: 1


- name: "Molecule | Verify | Run ssh-audit against localhost on configured port"
  ansible.builtin.shell: |-
    ssh-audit localhost:{{ __testing_configured_ssh_port }} -j > /tmp/ssh-audit-result.json
  register: __testing_ssh_audit_run
  changed_when: false
  failed_when: false


- name: "Molecule | Verify | Assert ssh-audit executed successfully"
  ansible.builtin.assert:
    that:
      - __testing_ssh_audit_run.rc == 0
    fail_msg: "ssh-audit failed to run: {{ __testing_ssh_audit_run.stderr }}"
    success_msg: "ssh-audit executed successfully"


- name: "Molecule | Verify | Read ssh-audit JSON results"
  ansible.builtin.slurp:
    src: /tmp/ssh-audit-result.json
  register: ssh_audit_json_encoded
  failed_when: false
  when: __testing_ssh_audit_run.rc == 0


- name: "Molecule | Verify | Parse ssh-audit results"
  ansible.builtin.set_fact:
    ssh_audit_results: "{{ ssh_audit_json_encoded['content'] | b64decode | from_json }}"
  when: __testing_ssh_audit_run.rc == 0 and ssh_audit_json_encoded is defined and ssh_audit_json_encoded['content'] is defined


- name: "Molecule | Verify | Extract warnings and failures from ssh-audit results"
  ansible.builtin.set_fact:
    __testing_ssh_audit_warnings: "{{ ssh_audit_results.warnings | default([]) }}"
    __testing_ssh_audit_failures: "{{ ssh_audit_results.failures | default([]) }}"
  when: __testing_ssh_audit_run.rc == 0 and ssh_audit_results is defined


- name: "Molecule | Verify | Display warnings if any"
  ansible.builtin.debug:
    msg: "Warnings: {{ __testing_ssh_audit_warnings }}"
  when:
    - __testing_ssh_audit_warnings is defined
    - __testing_ssh_audit_warnings | length > 0


- name: "Molecule | Verify | Display failures if any"
  ansible.builtin.debug:
    msg: "Failures: {{ __testing_ssh_audit_failures }}"
  when:
    - __testing_ssh_audit_failures is defined
    - __testing_ssh_audit_failures | length > 0


- name: "Molecule | Verify | Assert ssh-audit has no warnings or failures"
  ansible.builtin.assert:
    that:
      - __testing_ssh_audit_run.rc == 0
      - __testing_ssh_audit_warnings is not defined or
        (__testing_ssh_audit_warnings is defined and __testing_ssh_audit_warnings | length == 0)
      - __testing_ssh_audit_failures is not defined or
        (__testing_ssh_audit_failures is defined and __testing_ssh_audit_failures | length == 0)
    fail_msg: "ssh-audit detected issues with SSH configuration"
    success_msg: "ssh-audit verified SSH configuration with no issues"
  when: __testing_ssh_audit_run.rc == 0
